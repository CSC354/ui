@page "/register"
@using Sijl
@using UI.Helpers
@inject Sijl.SijlClient Client
<Header Current="Register"></Header>

<h3>Register</h3>


<Error Message="@_message"></Error>

<div class="box wide">
    <div class="form-grouping">
        <p>
            <label for="first_name">First name:</label>
            <input size="30" autofocus="autofocus" type="text" name="first_name" id="first_name" @bind="_request.FirstName">
            <br>


            <label for="last_name">Last name:</label>
            <input size="30" autofocus="autofocus" type="text" name="last_name" id="last_name" @bind="_request.LastName">
            <br>


            <label for="email">Email:</label>
            <input size="30" autofocus="autofocus" type="text" name="email" id="email" @bind="_request.Email">
            <br>


            <label for="username">Username:</label>
            <input size="30" autofocus="autofocus" type="text" name="username" id="username" @bind="_request.Username">
            <br>

            <label for="password">Password:</label>
            <input size="30" type="password" name="password" id="password" @bind="_request.Password">
            <br>


            <label for="age">Age:</label>
            <input size="30" autofocus="autofocus" type="number" name="age" id="age" @bind="_request.Age">
            <br>
        </p>

        <p>
            <button type="submit" @onclick="RegisterMethod">Register</button>
        </p>

    </div>
</div>


@code {
    private string? _message;
    private readonly NewUserRequest _request = new() {Age = 20};
    protected override void OnInitialized()
    {
        if (_storageService.User() is not null)
        {
            NavigationManager.NavigateTo("/");
        }
        base.OnInitialized();
    }
    private async Task RegisterMethod()
    {
        var res = await Client.RegisterAsync(_request);
        if (res is null)
        {
            _message = "Something wrong happened";
            return;
        }
        const string please = "Please enter a valid ";
        switch (res.Error)
        {
            case Err.Ok:
                NavigationManager.NavigateTo("/", true);
                await _storageService.RegisterAsync(res.Token, _request.Username);
                break;
            case Err.GeneratingToken:
                _message = "Something wrong happened";
                break;
            case Err.InvalidFirstName:
                _message = please + "first name";
                break;
            case Err.InvalidLastName:
                _message = please + "last name";
                break;
            case Err.InvalidEmail:
                _message = please + "email address";
                break;
            case Err.InvalidAge:
                _message = please + "age";
                break;
            case Err.InvalidUsername:
                _message = please + "username";
                break;
            case Err.AlreadyUsedUsername:
                _message = $"The username {_request.Username} is already used, try to login instead";
                break;
            case Err.InvalidPassword:
                _message = "The password you used is very weak, please add more special characters and different letter cases";
                break;
            default:
                _message = "Something wrong happened";
                break;
        }
    }

}